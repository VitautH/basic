<?php

namespace app\controllers;

use Yii;
use app\models\Products;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use app\controllers\Base\MainController as MainController;
/**
 * ToDo: вывод списка услуг, связка услуг с продуктами
 */


class ProductsController extends MainController
{
public $slaidshow;
    public $slug;
/*
 * Псевдоконструктор
 */
    public function beforeAction($action)
    {
        $this->slaidshow=null;
        $this->slug= "products";
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Casino models.
     * @return mixed
     */
    public function actionIndex()
    {
//ToDo: Pagination?
        // Filter //
        if (Yii::$app->request->isPost){

            $request = Yii::$app->request->post();


            $items = Products::find();


            $items ->select('products.*, casino.title  as cname');
            $items->leftJoin('products_services', 'products.id = products_services.id_product');
            $items->leftJoin('casino', 'products.casino_id = casino.id');






            if(!empty($request['service'])){
                $services =$request['service'];
                $items ->andWhere(['IN', 'products_services.id_service', $services]);
            }
            if (!empty($request['min_price'])){
                $min_price = $request['min_price'];
                $items->andWhere([ '>=', 'price', $min_price ]);
            }
            if(!empty($request['max_price'])){
                $max_price = $request['max_price'];
                $items->andWhere([ '<=', 'price', $max_price ]);
            }
            if(!empty($request['city'])){
                $city = $request['city'];
                $items->andWhere([ '=', 'casino.city_id', $city ]);

            }

            if(!empty($request['casino'])){
                $casino = $request['casino'];
                $items->andWhere([ '=', 'casino.id', $casino ]);
            }





            $response =  $items->all();




            return $this->render('index', [
                'model' => $response,

            ]);



        }
        else {
            $model = Products::find()->limit(10)->all();

            return $this->render('index', [
                'model' => $model,

            ]);
        }
    }

    /**
     * Displays a single Casino model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id)
        ]);
    }


public function actionFilter(){

   if (Yii::$app->request->isAjax){

       $request = Yii::$app->request->post();


    $items = Products::find();


     $items ->select('products.*, casino.title  as cname');
       $items->leftJoin('products_services', 'products.id = products_services.id_product');
       $items->leftJoin('casino', 'products.casino_id = casino.id');






 if(!empty($request['service'])){
     $services =$request['service'];
     $items ->andWhere(['IN', 'products_services.id_service', $services]);
 }
 if (!empty($request['min_price'])){
     $min_price = $request['min_price'];
     $items->andWhere([ '>=', 'price', $min_price ]);
 }
     if(!empty($request['max_price'])){
         $max_price = $request['max_price'];
         $items->andWhere([ '<=', 'price', $max_price ]);
     }
       if(!empty($request['city'])){
           $city = $request['city'];
           $items->andWhere([ '=', 'casino.city_id', $city ]);

       }

       if(!empty($request['casino'])){
           $casino = $request['casino'];
           $items->andWhere([ '=', 'casino.id', $casino ]);
       }




       $response =  $items->all();



unset($request);
unset($items);

       return $this->renderPartial('_ajax_index', [
           'model' => $response

       ]);



  }


}


    /**
     * Finds the Casino model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Casino the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Products::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
