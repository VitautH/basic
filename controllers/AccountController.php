<?php

namespace app\controllers;

use app\controllers\Base\MainController as MainController;
use app\models\User;
use app\models\Order;
use app\models\Products;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\ForbiddenHttpException;
use Yii;
use yii\web\Response;
use yii\widgets\ActiveForm;

class AccountController extends MainController
{
    private $user;
    private $order;
    private $user_id;
    public $slug;

    public function __construct($id, \yii\base\Module $module, array $config = [])
    {


        if (Yii::$app->user->isGuest) {

            throw new ForbiddenHttpException('Доступ запрещён');
        } else {
            $this->user_id = Yii::$app->user->identity->getId();
            $this->user = User::findOne(['id' => $this->user_id]);
            // ToDo: проверить  на Order id
            $this->order = new Order();

        }


        parent::__construct($id, $module, $config);
    }

    // Turn off slaidshow
    public function beforeAction($action)
    {
        $this->slaidshow = null;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function actionIndex()
    {

        return $this->render('index', ['model' => $this->order->findAll(['user_id' => $this->user_id])]);
    }

    // Профиль
    public function actionProfile()
    {


        $message = null;
        $model = User::findOne($this->user_id);
        $model->setScenario(User::SCENARIO_UPDATE);
        if (!empty($_POST)) {
            $model->load($_POST);
            /*
                *  Validation
                */
            if (\Yii::$app->request->isAjax) {
                return $this->ajaxValidation($model);
            } else {
                if ($model->validate()) {

                    if ($model->save()) {
                        $message = 'Информация обновлена';
                        return $this->render('profile', [
                            'model' => $model,
'message'=> $message

                        ]);
                    }
                }
            }

        }
       else  {
        return $this->render('profile', [
            'model' => $model,


        ]);
    }
    }




    /**
     * Finds the Casino model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Casino the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
    /**
     * @throws \yii\base\ExitException
     */
    protected function ajaxValidation($model)
    {

        $model->load(\Yii::$app->request->post());

        \Yii::$app->response->format = Response::FORMAT_JSON;
        \Yii::$app->response->data = ActiveForm::validate($model);


        \Yii::$app->response->send();
        \Yii::$app->end();

    }
}
