<?php

namespace app\controllers;

use app\controllers\Base\MainController as MainController;
use app\models\Coupon;
use app\models\User;
use app\models\Order;
use app\models\Products;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\ForbiddenHttpException;
use Yii;
use yii\web\Response;
use yii\widgets\ActiveForm;

class AccountController extends MainController
{
    private $user;
    private $order;
    private $user_id;
    public $slug;

    public function __construct($id, \yii\base\Module $module, array $config = [])
    {


        if (Yii::$app->user->isGuest) {

            throw new ForbiddenHttpException('Доступ запрещён');
        } else {
            $this->user_id = Yii::$app->user->identity->getId();
            $this->user = User::findOne(['id' => $this->user_id]);
            // ToDo: проверить  на Order id
            $this->order = new Order();

        }


        parent::__construct($id, $module, $config);
    }

    // Turn off slaidshow
    public function beforeAction($action)
    {
        $this->slaidshow = null;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function actionIndex()
    {

        return $this->render('index', ['model' => $this->order->find()->andWhere(['=', 'user_id', Yii::$app->user->getId()])->andWhere(['paid' => Order::PAID])->andWhere(['visible' => Order::VISIBLE])->orderBy(['created_at' => SORT_DESC])->all()]);
    }

    /*
     * Filter Order
     */
    public function actionFilter()
    {
        if (Yii::$app->request->isAjax) {
            $request = Yii::$app->request->post();
            $items = Order::find();
            $items->select('products.*, casino.id, order.*, order.id as oid, coupon.* ');
            $items->leftJoin('products', 'products.id = order.product_id');
            $items->leftJoin('casino', 'casino.id = products.casino_id');
            $items->leftJoin('products_services', 'products.id = products_services.id_product');
            $items->leftJoin('coupon', 'coupon.id = order.coupon_id');
            if (!empty($request['city'])) {
                $city = $request['city'];
                $items->where(['=', 'casino.city_id', $city]);
            }
            if (!empty($request['data'])) {
                $created_at = $request['data'];
                $items->where(['=', 'date_format(`created_at`, "%Y-%m-%d")', $created_at]);
            }
            if (!empty($request['min_price']) || !empty($request['max_price'])) {
                $min_price = $request['min_price'];
                $max_price = $request['max_price'];
                if (!empty($min_price)) {
                    $items->where(['>=', 'price', $min_price]);
                }
                if (!empty($max_price)) {
                    $items->where(['<=', 'price', $max_price]);
                }

            }
            if (!empty($request['checked'])&& $request['checked']== Coupon::USED) {

                $items->where(['=', 'coupon.status', Coupon::USED]);
            }
            $items->andWhere(['=', 'order.user_id', Yii::$app->user->getId()]);
            $items->andWhere(['=', 'order.paid', Order::PAID]);
            $items->andWhere(['=', 'order.visible', Order::VISIBLE]);
            $items->orderBy(['created_at' => SORT_DESC]);
            $response = $items->all();
            unset($request);
            unset($items);

            return $this->renderPartial('_ajax_index', [
                'response' => $response

            ]);
        }
    }

    /*
     * Hide Used Coupon
     */
    public function actionCouponHide($slug)
    {
        $model = Order::findOne(['id' => $slug, 'user_id' => Yii::$app->user->getId()]);
        if ($model) {
            $model->visible = Order::HIDE;
            $model->save();
            $this->redirect(Yii::$app->request->referrer);
        }
    }

    // Профиль
    public function actionProfile()
    {
        $message = null;
        $model = User::findOne($this->user_id);
        $model->setScenario(User::SCENARIO_UPDATE);
        if (!empty($_POST)) {
            $model->load($_POST);
            /*
                *  Validation
                */
            if (\Yii::$app->request->isAjax) {
                return $this->ajaxValidation($model);
            } else {
                if ($model->validate()) {

                    if ($model->save()) {
                        $message = 'Информация обновлена';
                        return $this->render('profile', [
                            'model' => $model,
                            'message' => $message

                        ]);
                    }
                }
            }

        } else {
            return $this->render('profile', [
                'model' => $model
            ]);
        }
    }


    /**
     * Finds the Casino model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Casino the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    /**
     * @throws \yii\base\ExitException
     */
    protected function ajaxValidation($model)
    {

        $model->load(\Yii::$app->request->post());

        \Yii::$app->response->format = Response::FORMAT_JSON;
        \Yii::$app->response->data = ActiveForm::validate($model);


        \Yii::$app->response->send();
        \Yii::$app->end();

    }
}
