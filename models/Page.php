<?php

namespace app\models;

use app\models\base\Page as BasePage;
use yii\behaviors\SluggableBehavior;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "page".
 *
 * @property integer $id
 * @property string $title
 * @property string $brief
 * @property string $meta_description
 * @property string $meta_keywords
 * @property string $content
 * @property int $menu_id
 * @property string $date_created
 */
class Page extends BasePage
{
    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
            ],
        ];
    }
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'page';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title',  'menu_id'], 'required'],
            [['date_created', 'brief'], 'safe'],
            [['content', 'slug'], 'string'],
            [['menu_id'], 'integer', 'max' => 11],
            [['title', 'meta_description', 'meta_keywords'], 'string', 'max' => 225],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'meta_description' => 'Meta Description',
            'meta_keywords' => 'Meta Keywords',
            'content' => 'Содержимое',
            'date_created' => 'Дата создания',
            'menu_id'=>'Меню',
            'slug'=> 'ЧПУ'
        ];
    }


    public function save($runValidation = true, $attributeNames = null)
    {
        $this->date_created = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd h:i:s');


        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }
    /*
     * return Array Menu
     */
    public function getMenuList()
    {
        $items_menu = Menu::find()
            ->asArray()
            ->all();
        return  ArrayHelper::map($items_menu,'id','menu_name');

    }

    /*
     * return string Menu Name
     */
    public function getMenuName()
    {

        if($this->menu_id !== null) {
            $menu_name = Menu::find()
                ->where([ '=', 'id', $this->menu_id ])
                ->one();



            return $menu_name['menu_name'];
        }
        else {
            return "N/A";
        }

    }

}
