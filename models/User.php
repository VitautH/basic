<?php

namespace app\models;
use app;
use Yii;
use yii\base\Security;
use app\models\base\User as BaseUser;
use dektrium\user\models\Token;
use dektrium\user\Mailer;
use dektrium\user\Module;
use dektrium\user\traits\ModuleTrait;

class User extends BaseUser
{
use ModuleTrait;
    const GUEST = null;
    const ADMIN = 1;
    const BUYER = 2;
    const MANAGER = 3;

    const BEFORE_CREATE   = 'beforeCreate';
    const AFTER_CREATE    = 'afterCreate';
    const BEFORE_REGISTER = 'beforeRegister';
    const AFTER_REGISTER  = 'afterRegister';
    const BEFORE_CONFIRM  = 'beforeConfirm';
    const AFTER_CONFIRM   = 'afterConfirm';
    const SCENARIO_REGISTER = 'register';
    const SCENARIO_UPDATE = 'update';
    public $password;
    public $login;


    public function scenarios()
    {
        $scenarios = parent::scenarios();
// ToDo: Проверка полей регистрации пользователя
        $scenarios[self::SCENARIO_REGISTER] = ['username', 'email', 'password', 'phone'];
        $scenarios[self::SCENARIO_UPDATE] = ['firstname', 'name', 'email', 'phone', 'password'];

        return $scenarios;
    }

    public function rules()
    {
        //ToDo: Правила валидации/ безопастности
        return [
            //Rules for Registration
// username rules
            'usernameLength' => ['username', 'string', 'min' => 3, 'max' => 255, 'on' => self::SCENARIO_REGISTER],
            'usernameTrim' => ['username', 'filter', 'filter' => 'trim', 'on' => self::SCENARIO_REGISTER],
            'usernameRequired' => ['username', 'required', 'on' => self::SCENARIO_REGISTER],
            'usernameUnique' => [
                'username',
                'unique',

                'message' => Yii::t('user', 'This username has already been taken'), 'on' => self::SCENARIO_REGISTER
            ],
            // email rules
            'emailTrim' => ['email', 'filter', 'filter' => 'trim', 'on' => self::SCENARIO_REGISTER],
            'emailRequired' => ['email', 'required', 'on' => self::SCENARIO_REGISTER],
            'emailPattern' => ['email', 'email', 'on' => self::SCENARIO_REGISTER],
            'emailUnique' => [
                'email',
                'unique',

                'message' => Yii::t('user', 'This email address has already been taken'), 'on' => self::SCENARIO_REGISTER
            ],
            // password rules
            'passwordRequired' => ['password', 'required', 'skipOnEmpty' => false, 'on' => self::SCENARIO_REGISTER],
            'passwordLength' => ['password', 'string', 'min' => 1, 'max' => 72, 'on' => self::SCENARIO_REGISTER],
            // phone rules
            'phoneRequired' => ['phone', 'required', 'on' => self::SCENARIO_REGISTER],
            'phoneType' => [['phone'], 'string', 'on' => self::SCENARIO_REGISTER],
            //  Rules for Update
            'ruleForUpdateForEmail' => [['email'], 'email', 'on' => self::SCENARIO_UPDATE],
            'ruleForUpdateForFirstnameName' => [['firstname', 'name'], 'string', 'on' => self::SCENARIO_UPDATE],
            'ruleForUpdateForPhone' => [['phone'], 'string', 'on' => self::SCENARIO_UPDATE],
            'ruleForUpdateForPassword' => [['password'], 'string', 'on' => self::SCENARIO_UPDATE],
        ];
    }

    public function attributeLabels()
    {
        return [
            'name' => 'Имя',
            'firstname' => 'Фамилия',
            'username' => 'Логин',
            'phone' => 'Телефон',
            'email' => 'E-mail',
            'password' => 'Пароль',


        ];
    }

    public function load($data, $formName = null)
    {
       if(!$this->validate()){
           return false;
       }
       else {
           $this->updated_at = time();
           $this->generatePasswordHash($data);
       }
        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }
// Генерация пароля
    private function generatePasswordHash($data)
    {

        if (!empty($data['User']['password'])) {
            $this->password_hash = Yii::$app->getSecurity()->generatePasswordHash($data['User']['password']);
        }


    }

    // Load Attributes for Registration
    public function registration ($data) {
   $this->password= $data['User']['password'];
        $this->email= $data['User']['email'];
        $this->phone= $data['User']['phone'];
        $this->username= $data['User']['username'];
      if ($this->validate($this)){
          if($this->register()){
              return true;
          }
      }
      else {
          return false;
      }
    }
    // Registration - ToDo: вынести в отдельный класса
    private function register (){
if ($this->getIsNewRecord() == false)
{
throw new \RuntimeException('Calling "' . __CLASS__ . '::' . __METHOD__ . '" on existing user');
}

$transaction = $this->getDb()->beginTransaction();

try {
    // ToDo: включить подтверждение на почту и смс
    //$this->confirmed_at = $this->module->enableConfirmation ? null : time();
    //
    $this->confirmed_at= time();
    $this->created_at = time();
    $this->flags=1;
$this->password_hash=   $this->password_hash = Yii::$app->getSecurity()->generatePasswordHash($this->password);
$this->role_id= 2;

    $this->trigger(self::BEFORE_REGISTER);

    if (!$this->save()) {
        $transaction->rollBack();
        return false;
    }
    // ToDo: включить подтверждение на почту и смс
//    if ($this->module->enableConfirmation) {
//        /** @var Token $token */
//        $token = \Yii::createObject(['class' => Token::className(), 'type' => Token::TYPE_CONFIRMATION]);
//        $token->link('user', $this);
//    }


    $this->trigger(self::AFTER_REGISTER);

    $transaction->commit();
    Yii::$app->session->setFlash(
        'success_registration', 'Уважаемый '.$this->username.'!<br> Поздравляем Вас с успешной регистрацией!'

    );
    return true;
} catch (\Exception $e) {
    $transaction->rollBack();
    \Yii::warning($e->getMessage());
    throw $e;
}
}


}
