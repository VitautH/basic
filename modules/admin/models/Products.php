<?php

namespace app\modules\admin\models;

use phpDocumentor\Reflection\Types\Null_;
use Yii;
use app\models\base\Products as BaseProducts;
use yii\helpers\ArrayHelper;
use app\core\ImageClass;
use yii\web\UploadedFile;
use yii\db\ActiveRecord;
use yii\db;
class Products extends BaseProducts
{
public $imageFile;

    /*
     * Проверка на ввод данных + обязательные поля
     */
    public function rules()
    {
        return [[['title','cost','casino_id'],'required'],
            [['casino_id', 'cost', 'cashback'],'number'],
            [['imageFile'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
           [['title', 'description', 'meta_keywords', 'meta_description'],'safe'],
        ];
    }

    /*
     * @return array CasinoList
     *
     */
    public function getCasinoList()
    {
 $casino_array = casino::find()->select(['id','title'])->all();
       return $items = ArrayHelper::map($casino_array,'id','title');
    }
/*
 *  Method  saveImage
 * после  сохранения Продукта
 */
public function saveImage()
{
    $imgUpload =  new ImageClass();

        $path = $imgUpload->uploadImage(UploadedFile::getInstance($this, 'imageFile'));
        $connection = Yii::$app->db;
        $connection->createCommand()->insert('img_product', ['img_url' => $path, 'product_id' => $this->id])->execute();
        $connection = null;


}
    public function afterSave($insert, $changedAttributes)
    {
        if(UploadedFile::getInstance($this, 'imageFile')!==null){
           $this->saveImage();

        }




        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }


    /*
     * Method  Delete image
     *
     */
    public   function  deleteImage()
    {
        if ($this->getImages()!== null) {
            foreach ($this->getImages() as $image) {


                $imgDelete = new ImageClass();
                $imgDelete->deleteImage($image['img_url']);
            }


            $connection = Yii::$app->db;
            $connection->createCommand()->delete('img_product', 'product_id=:id', array(':id' => $this->id))->execute();
            $connection = null;
        }

    }
    public function delete()
    {
$this->deleteImage();



        return parent::delete(); // TODO: Change the autogenerated stub
    }
    /*
     * Получение изображений продукта
     * @return array|null
     */

    public function getImages()
    {
        $connection = Yii::$app->db;
        $get_img_url = $connection->createCommand("SELECT  id, img_url FROM img_product WHERE product_id =  $this->id")
            ->queryAll();
        if (!empty($get_img_url)) {
            return  $get_img_url;
        }
        else {
            return null;
        }

    }
    /*
     * Обновление картинок
     * ToDo: дописать множественное обновление картинок
     */

    public function updateImage(){
        $this->deleteImage();
        //$this->saveImage();
    }

    public function update($runValidation = true, $attributeNames = null)
    {
        $this->updateImage();
        return parent::update($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }
}
